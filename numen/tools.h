#pragma once
#include "head.h"
/*
win7:
FF F3 55 57 48 ?? ?? ?? ?? ?? ?? 4C 8B C2 48 8B F9 48 ?? ?? ?? ?? ?? ?? 0F ?? ??
?? ?? ?? 48 ?? ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ?? 48 8B ?? ?? 48 85 C0 74 ?? B9 ??
?? ?? ?? 66 39 08 0F ?? ?? ?? ?? ??

win10 21h2:
40 55 56 57 41 56 48 8D ?? ?? ?? 48 ?? ?? ?? ?? ?? ?? 40 32 F6 4C 8B F2 33 D2 40
88 ?? ?? 48 ?? ?? ?? ?? ?? ?? 48 8B F9 48 89 ?? ?? 89 55 ?? 0F ?? ?? ?? ?? ?? 48
?? ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ?? 48 8B ?? ?? 48 85 C0 74 ?? B9 ?? ?? ?? ?? 66
39 08 0F ?? ?? ?? ?? ??

win10 1809:
40 55 56 57 41 56 48 8D ?? ?? ?? 48 ?? ?? ?? ?? ?? ?? 40

win10 1803:
40 55 56 57 41 56 41 57 48 8B EC 48 ?? ?? ?? ?? ?? ?? 33 C0 45 32 FF 48 ?? ?? ??
?? ?? ?? 4C 8B F2 48 8B F9 48 89 ?? ?? 48 89 ?? ?? 48 89 ?? ?? 48 89 ?? ?? 48 89
?? ?? 48 89 ?? ?? 44 88 ?? ?? 0F ?? ?? ?? ?? ?? 48 ?? ?? ?? ?? ?? ?? 0F ?? ?? ??
?? ?? 48 8B ?? ?? 48 85 C0 74 ?? B9 ?? ?? ?? ?? 66 39 08 0F ?? ?? ?? ?? ??

win10 1703:
40 55 56 57 41 56 41 57 48 8B EC 48 ?? ?? ?? ?? ?? ?? 33 C0 45 32 FF 48
*/
typedef enum _winver {
    WINVER_7 = 0x0610,
    WINVER_7_SP1 = 0x0611,
    WINVER_8 = 0x0620,
    WINVER_81 = 0x0630,
    WINVER_10 = 0x0A00
};
enum class _simple_system_version {
    kUnk,
    kWin7,
    kWin8,
    kWin8_1,
    kWin10_1507,
    kWin10_1511,
    kWin10_1607,
    kWin10_1703,
    kWin10_1709,
    kWin10_1803,
    kWin10_1809,
    kWin10_1903,
    kWin10_1909,
    kWin10_2004,
    kWin10_20H2,
    kWin10_21H1,
    kWin10_Server_2022,
    kWin11_21H2,
    kWin10_21H2,
    kWin11_22H2,
    kWin10_22H2,
};
extern "C" {
NTSYSAPI
NTSTATUS
NTAPI
ZwQuerySystemInformation(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
                         OUT PVOID SystemInformation,
                         IN ULONG SystemInformationLength,
                         OUT PULONG ReturnLength OPTIONAL);
}
namespace tools {
auto find_pattern_image(void *base, const char *pattern, const char *mask)
    -> void *;
auto find_pattern(void *base, int length, const char *pattern, const char *mask)
    -> void *;
auto check_mask(const char *base, const char *pattern, const char *mask)
    -> bool;
auto get_driver_base_by_name(char *driver_name) -> uintptr_t;
auto get_simple_system_version() -> _simple_system_version;
}  // namespace tools
